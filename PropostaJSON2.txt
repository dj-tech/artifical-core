Dizionario top-level:
	
	key="sequence_id"; value -> FASTA header del file della genomica (senza '>') (chiave obbligatoria)
	key="program_version"; value -> la versione della pipeline che ha prodotto il JSON
	key="file_format_version"; value -> versione del JSON schema
	key="regions"; value -> array delle regioni (chiave obbligatoria)		
	key="boundaries"; value -> array dei boundaries (chiave obbligatoria)
	key="exons"; value -> array degli esoni (chiave obbligatoria)
	key="introns"; value -> array degli introni (chiave obbligatoria)
	key="isoforms"; value -> array delle isoforme

*********************************************************************************************************************************
	Regione -> massima regione che verifica una delle seguenti condizioni:
		(i) e' inclusa totalmente in tutte le isoforme -->> regione codificante conservata
		(ii) e' inclusa totalmente in almeno un'isoforma ma non in tutte -->> regione codificante alternativa
		(iii) e' esclusa in tutte le isoforme -->> regione non codificante (o spliced)
		(iv) regione di assenza di informazione -->> regione unknown
	
	La sequenza (ordinata) delle regioni sulla genomica e' fornita dal valore della chiave "regions"
		key="regions"; value -> array di regioni
		Ogni elemento dell'array e' un hash con le seguenti chiavi:
			key="start"; value -> posizione 1-based di inizio sulla genomica (chiave obbligatoria)
			key="end"; value -> posizione 1-based di fine sulla genomica (chiave obbligatoria)
			key="sequence"; value -> sequenza nucleotidica
			key="type"; value -> "codifying" se la regione e' codificante, "spliced" se e' non codificante, "unknown" se e' unknown (chiave obbligatoria)
			key="alternative"; value -> true se la regione codificante e' alternativa, false se e' conservata (chiave
				obbligatoria solo se "type"="codifying"; non ha senso per "type" diverso da "codifying")
			key="coverage"; value -> valore di copertura
			key="last"; value -> true se e' l'ultima regione nell'array "regions", altrimenti false (chiave obbligatoria)
			key="id"; value -> indice di posizione della regione all'interno dell'array "regions" (chiave obbligatoria)
			
			NOTE:
				(1) nella visualizzazione, l'altezza del rettangolo che rappresenta una regione codificante dovrebbe essere
				proporzionale al valore di "coverage" (per type="spliced"|"unknown" questo valore non ha senso).

*********************************************************************************************************************************
	Boundary -> confine tra due regioni consecutive sulla genomica (chiamate regioni di sinistra e di destra)
	
	La sequenza (ordinata) dei boundaries sulla genomica e' fornita dal valore della chiave "boundaries"
		key="boundaries"; value -> array di boundaries
		Ogni elemento dell'array e' un hash con le seguenti chiavi:
			key="first"; value -> posizione, nell'array "regions", della regione di sinistra
			key="type"; value -> "5" se e' un ss 5', cioe' e' un confine esone-introne, "3" se e' un ss 3', cioe'
				e' un confine introne-esone, "both" se e' sia 5' che 3', "init" se e' un inizio della trascrizione, "term" se e' una
				fine di trascrizione, "unknown"
						
			NOTE:
				(1) se una delle due regioni che definiscono il boundary e' unknown (sicuramente non entrambe),
					il boundary non e' sicuramente uno splice site
				(2) "first"=-1 significa che non esiste una regione di sinistra (ovvero e' da trattare come unknown) e la regione
				di destra ha indice di posizione pari a 0: il boundary non e' sicuramente uno splice site
				(3) "last"=true per la regione di indice "first" (quella di sinistra) significa che non esiste una regione
					di destra (ovvero e' da trattare come unknown): il boundary non e' sicuramente uno splice site
		!!!		(4) ("first"+1) fornisce l'indice di posizione (nell'array "regions") della regione di destra, solo nel caso in cui
					si abbia "first"=-1 OPPURE "last?"=false per la regione di indice "first" (cioe' quella di sinistra),					
				(5) "type"="5" significa che il boundary e' un confine esone-introne: la fine dell'esone coincide con "end"
					della regione di sinistra, mentre l'inizio dell'introne coincide con "start" della regione di destra
					(la posizione dello splice site è in questo caso lo "start" della regione di destra)
				(6) "type"="3" significa che il boundary e' un confine introne-esone: la fine dell'introne coincide con "end"
					della regione di sinistra, mentre l'inizio dell'esone coincide con "start" della regione di destra
					(la posizione dello splice site è in questo caso l'"end" della regione di sinistra)
				(7) type="both" significa che il boundary e' sia un confine esone-introne che introne-esone:
					(la posizione dello splice site è in questo caso lo "start" della regione di destra)
				(8) type="init" significa che lo "start" della regione di destra è un inizio di trascrizione (cioè la posizione
					visualizzata)
				(9) type="term" significa che l'"end" della regione di sinistra è un termine di trascrizione (cioè la posizione
					visualizzata)

*********************************************************************************************************************************
	Esone
	
	L'insieme degli esoni e' fornito dal valore della chiave "exons"
		key="exons"; value -> array di esoni
		Ogni elemento dell'array e' un hash con le seguenti chiavi:
			key="left_boundary"; value -> indice di posizione, nell'array "boundaries", del left boundary L dell'esone
			key="right_boundary"; value -> indice di posizione, nell'array "boundaries", del right boundary R dell'esone
			key="annotated"; value -> true se annotato, altrimenti false
			
			NOTE:
				(1) Il left boundary L deve avere una regione di destra NON unknowm e con "type"="codifying" (cioe' deve essere
					codificante) il cui "start" coincide con lo start dell'esone
				(2) Il right boundary R deve avere una regione di sinistra NON unknown e con "type"="codifying" (cioe' deve essere
					codificante) il cui "end" coincide con l'end dell'esone
				(3) Se L non e' uno splice site allora l'esone sara' incompleto a sinistra
				(4) Se R non e' uno splice site allora l'esone sara' incompleto a destra
				(5) La sequenza nucleotidica dell'esone e' ottenuta concatenando le sequenze delle regioni di indice s, s+1, ..., e
					dove s coincide con l'indice della regione di destra del left boundary ed e coincide con l'indice della regione
					di sinistra del right boundary; tutte queste regioni non possono avere "type" diverso da "codifying" (cioe' devono essere
					codificanti). Se una di queste regioni ha "sequence" nulla, allora anche la sequenza dell'esone non e'
					determinabile.
			
*********************************************************************************************************************************
	Introne
	
	L'insieme degli introni e' fornito da valore della chiave "introns"
		key="introns"; value -> array di introni
		Ogni elemento dell'array e' un hash con le seguenti chiavi:
			key="left_boundary"; value -> indice di posizione, nell'array "boundaries", del left boundary L dell'introne
			key="right_boundary"; value -> indice di posizione, nell'array "boundaries", del right boundary R dell'introne
			key="prefix"; value -> prefisso dell'introne
			key="suffix"; value -> suffisso dell'introne
			
			NOTE:
				(1) Il left boundary L deve avere una regione di destra NON unknowm e con "type"="codifying"|"spliced" (cioe' non puo' essere
					unknown; se "type"="codifying" allora deve essere "alternative?"=true) il cui "start" coincide con lo start dell'introne
				(2) Il right boundary R deve avere una regione di sinistra NON unknown e con "type"="codifying"|"spliced" (cioe' non puo' essere
					unknown; se "type"="codifying" allora deve essere "alternative?"=true) il cui "end" coincide con l'end dell'introne
				(3) L deve essere uno splice site di tipo 5' (o di tipo "both")
				(4) R deve essere uno splice site di tipo 3' (o di tipo "both")
				(5) La sequenza nucleotidica dell'introne e' ottenuta concatenando le sequenze delle regioni di indice s, s+1, ..., e
					dove s coincide con l'indice della regione di destra del left boundary ed e coincide con l'indice della regione
					di sinistra del right boundary; tutte queste regioni non possono avere "type" uguale a "unknown" (non possono cioe' essere
					unknown). Le regioni con "type"="codifying" (cioe' le regioni codificanti) devono necessariamente avere "alternative?"=true
					(cioe' devono essere alternative). Se una di queste regioni ha "sequence" nulla, allora la sequenza dell'introne non
					e' determinabile.
				(6) "prefix"/"suffix" coincidono con un prefisso/suffisso della sequenza determinata secondo (5)
				(7) Il pattern dell'introne e' dato dai primi due simboli di "prefix" e dagli ultimi due simboli di "suffix"
			
*********************************************************************************************************************************
	Isoforma

	L'insieme delle isoforme e' fornito dal valore della chiave "isoforms"
		key="isoforms"; value -> array di isoforme
		Ogni elemento dell'array e' un array di indici di posizione nell'array "regions"
		
		NOTE:
			(1) le regioni di un'isoforma devono avere "type"="codifying" (cioe' essere codificanti)

****************************************************************************************************************************
				